/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package passcrypt.password.manager;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.InputMap;
import javax.swing.KeyStroke;
import javax.swing.JComponent;

/**
 *
 * @author C0delust
 */
public class CardView extends javax.swing.JPanel {

    /**
     * Creates new form CredView
     */
    static String value_password, value_dbname;
    private static Card[] c = null;
    private static Card[] temp;
    private Connection con;
    private ResultSet rs = null;
    private Statement smt = null;
    public static int card_count;
    private String url;
    long startTime = System.currentTimeMillis();

    public CardView(String pass, String dbname) {
        initComponents();
        card_container.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        card_container.add(loading, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 247, 319, 55));

        card_count = 0;
        value_password = pass;
        value_dbname = dbname;
        url = "jdbc:sqlite:Databases/" + value_dbname + ".db";

        preLoad();

        new java.util.Timer().schedule(
                new java.util.TimerTask() {
            @Override
            public void run() {
                card_container.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 10));
                countCards();
                postLoad();

            }
        },
                50
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        card_container = new javax.swing.JPanel();
        loading = new javax.swing.JPanel();
        jProgressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        add = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(900, 560));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(900, 560));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setMaximumSize(new java.awt.Dimension(900, 32767));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(900, 500));
        jScrollPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jScrollPane1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jScrollPane1FocusLost(evt);
            }
        });
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseExited(evt);
            }
        });

        card_container.setBackground(new java.awt.Color(255, 255, 255));
        card_container.setMaximumSize(new java.awt.Dimension(870, 2147483647));
        card_container.setMinimumSize(new java.awt.Dimension(870, 32767));
        card_container.setOpaque(false);
        card_container.setPreferredSize(new java.awt.Dimension(870, 480));
        card_container.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        loading.setMaximumSize(new java.awt.Dimension(369, 91));
        loading.setMinimumSize(new java.awt.Dimension(369, 91));

        jProgressBar.setPreferredSize(new java.awt.Dimension(300, 25));
        loading.add(jProgressBar);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Loading");
        loading.add(jLabel1);

        card_container.add(loading, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 247, 319, 55));

        jScrollPane1.setViewportView(card_container);

        logout.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/passcrypt/password/manager/logout.png"))); // NOI18N
        logout.setText(" Logout");
        logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logout.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        logout.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        logout.setMargin(new java.awt.Insets(2, 5, 2, 5));
        logout.setMaximumSize(new java.awt.Dimension(95, 43));
        logout.setMinimumSize(new java.awt.Dimension(95, 43));
        logout.setPreferredSize(new java.awt.Dimension(95, 36));
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        add.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/passcrypt/password/manager/add.png"))); // NOI18N
        add.setText("Add");
        add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        add.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        add.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        add.setMargin(new java.awt.Insets(2, 5, 2, 5));
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/passcrypt/password/manager/delete.png"))); // NOI18N
        delete.setText("Delete User");
        delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delete.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        delete.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        delete.setMargin(new java.awt.Insets(2, 5, 2, 5));
        delete.setMaximumSize(new java.awt.Dimension(95, 43));
        delete.setMinimumSize(new java.awt.Dimension(95, 43));
        delete.setPreferredSize(new java.awt.Dimension(95, 36));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane1.getVerticalScrollBar().setUnitIncrement(30);
    }// </editor-fold>//GEN-END:initComponents

    private void preLoad() {
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        add.setEnabled(false);
        logout.setEnabled(false);
        delete.setEnabled(false);
    }

    private void postLoad() {
        System.out.println("Time Elapsed: " + (System.currentTimeMillis() - startTime) / 1000);

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        loading.setVisible(false);
        add.setEnabled(true);
        logout.setEnabled(true);
        delete.setEnabled(true);

    }

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        PassCryptPasswordManager.obj.MainPanel.removeAll();
        PassCryptPasswordManager.obj.MainPanel.revalidate();
        PassCryptPasswordManager.obj.MainPanel.repaint();
        PassCryptPasswordManager.obj.MainPanel.add(new Login());
    }//GEN-LAST:event_logoutActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        new addCard(PassCryptPasswordManager.obj, true, value_password, value_dbname).setVisible(true);
    }//GEN-LAST:event_addActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        new deleteUser(PassCryptPasswordManager.obj, true).setVisible(true);
    }//GEN-LAST:event_deleteActionPerformed

    private void jScrollPane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jScrollPane1FocusGained
        InputMap im = jScrollPane1.getVerticalScrollBar().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        im.put(KeyStroke.getKeyStroke("DOWN"), "positiveUnitIncrement");
        im.put(KeyStroke.getKeyStroke("UP"), "negativeUnitIncrement");
    }//GEN-LAST:event_jScrollPane1FocusGained

    private void jScrollPane1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jScrollPane1FocusLost
        InputMap im = jScrollPane1.getVerticalScrollBar().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        im.put(KeyStroke.getKeyStroke("DOWN"), "");
        im.put(KeyStroke.getKeyStroke("UP"), "");
    }//GEN-LAST:event_jScrollPane1FocusLost

    private void jScrollPane1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseEntered
        InputMap im = jScrollPane1.getVerticalScrollBar().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        im.put(KeyStroke.getKeyStroke("DOWN"), "positiveUnitIncrement");
        im.put(KeyStroke.getKeyStroke("UP"), "negativeUnitIncrement");
    }//GEN-LAST:event_jScrollPane1MouseEntered

    private void jScrollPane1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseExited
        InputMap im = jScrollPane1.getVerticalScrollBar().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        im.put(KeyStroke.getKeyStroke("DOWN"), "");
        im.put(KeyStroke.getKeyStroke("UP"), "");
    }//GEN-LAST:event_jScrollPane1MouseExited

    private void countCards() {

        int card_number = 0;

        try {
            con = DriverManager.getConnection(url);

            String query = "SELECT COUNT(*) AS rowcount FROM credentials";
            smt = con.createStatement();
            rs = smt.executeQuery(query);

            rs.next();
            card_number = rs.getInt("rowcount");
            jProgressBar.setMaximum(card_number);

            rs.close();
            smt.close();
            con.close();

            showCards(card_number);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                rs.close();
                smt.close();
                con.close();
            } catch (Exception e) {
                System.out.println("Exception : " + e.getMessage());
            }
        }

    }

    private void showCards(int totalCards) {

        try {
            con = DriverManager.getConnection(url);

            if (totalCards != 0) {
                c = new Card[totalCards];

                setContainerSize();

                String query = "SELECT * FROM credentials";
                smt = con.createStatement();
                rs = smt.executeQuery(query);

                while (rs.next()) {
                    jProgressBar.setValue(card_count + 1);
                    createCard(card_count, rs.getInt("ID"), rs.getString("Title"), rs.getString("Username"), rs.getString("Password"));
                }
            } else {
                c = new Card[1];
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                rs.close();
                smt.close();
                con.close();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }

    public static void createCard(int index, int ID, String title, String username, String password) {
        c[index] = new Card(index, Integer.toString(ID),
                AES256.decrypt(title, value_password),
                AES256.decrypt(username, value_password),
                AES256.decrypt(password, value_password),
                value_dbname);

        card_container.add(c[index]);
        card_count++;
    }

    public static void deleteCard(int index) {
        temp = new Card[c.length - 1];

        for (int i = 0, k = 0; i < c.length; i++) {

            if (i == index) {
                continue;
            }

            temp[k++] = c[i];
        }

        card_count--;
        temp = Arrays.copyOf(c, c.length - 1);
        c = temp;
        setContainerSize();
    }

    public static void setContainerSize() {
        float num = (float) (c.length / Math.ceil(CardView.card_container.getWidth() / 189));
        int height = ((int) Math.ceil(num)) * 214;

        System.out.println("Total Cards Loaded: " + c.length + " | Height: " + height);
        CardView.card_container.setPreferredSize(new java.awt.Dimension(CardView.card_container.getWidth(), height));
    }

    public static void increaseSize() {
        temp = Arrays.copyOf(c, c.length + 1);
        c = temp;
        setContainerSize();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    public static javax.swing.JPanel card_container;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar;
    public static javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel loading;
    private javax.swing.JButton logout;
    // End of variables declaration//GEN-END:variables
}
