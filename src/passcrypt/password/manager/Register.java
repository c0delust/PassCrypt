/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package passcrypt.password.manager;

import java.awt.Color;
import java.awt.Cursor;
import java.io.File;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.sql.Connection;  
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;  
import java.sql.PreparedStatement;
import java.sql.SQLException; 
import java.sql.Statement;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author C0delust
 */
public class Register extends javax.swing.JPanel {

    private Login login;
    private boolean email_correct, pass_correct, confirm_pass_correct;
    private String regex = "^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@" + "[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$";
    private Pattern pattern = Pattern.compile(regex);
    private int password_length = 6;
    private String temp_pass, temp_confirm_pass;
    private String url, value_email,value_password, value_dbname;

    public Register() {
        initComponents();

        email_error.setVisible(false);
        password_error.setVisible(false);
        confrim_password_error.setVisible(false);
        msg.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        input_email = new javax.swing.JTextField();
        input_password = new javax.swing.JPasswordField();
        input_confirm_password = new javax.swing.JPasswordField();
        showPass = new javax.swing.JCheckBox();
        signup_button = new javax.swing.JButton();
        login_label = new javax.swing.JLabel();
        email_error = new javax.swing.JLabel();
        confrim_password_error = new javax.swing.JLabel();
        password_error = new javax.swing.JLabel();
        msg = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(900, 561));

        jLabel1.setFont(new java.awt.Font("Advent Pro", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sign Up");

        input_email.setDocument(new CharacterLimit(100));
        input_email.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        input_email.setForeground(new java.awt.Color(153, 153, 153));
        input_email.setText("Email");
        input_email.setMargin(new java.awt.Insets(8, 10, 8, 10));
        input_email.setName(""); // NOI18N
        input_email.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                input_emailFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                input_emailFocusLost(evt);
            }
        });
        input_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                input_emailKeyReleased(evt);
            }
        });

        input_password.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        input_password.setForeground(new java.awt.Color(153, 153, 153));
        input_password.setText("Master Password");
        input_password.setEchoChar((char) 0);
        input_password.setHighlighter(null);
        input_password.setMargin(new java.awt.Insets(8, 10, 8, 10));
        input_password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                input_passwordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                input_passwordFocusLost(evt);
            }
        });
        input_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                input_passwordKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                input_passwordKeyTyped(evt);
            }
        });

        input_confirm_password.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        input_confirm_password.setForeground(new java.awt.Color(153, 153, 153));
        input_confirm_password.setText("Confirm Master Password");
        input_confirm_password.setEchoChar((char) 0);
        input_confirm_password.setHighlighter(null);
        input_confirm_password.setMargin(new java.awt.Insets(8, 10, 8, 10));
        input_confirm_password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                input_confirm_passwordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                input_confirm_passwordFocusLost(evt);
            }
        });
        input_confirm_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                input_confirm_passwordKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                input_confirm_passwordKeyTyped(evt);
            }
        });

        showPass.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        showPass.setText("Show Password");
        showPass.setOpaque(false);
        showPass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showPassItemStateChanged(evt);
            }
        });

        signup_button.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        signup_button.setText("Sign Up");
        signup_button.setToolTipText("Cloud Login");
        signup_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        signup_button.setNextFocusableComponent(login_label);
        signup_button.setRequestFocusEnabled(false);
        signup_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signup_buttonActionPerformed(evt);
            }
        });

        login_label.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        login_label.setText("Already have an account ? Login");
        login_label.setNextFocusableComponent(input_email);
        login_label.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                login_labelFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                login_labelFocusLost(evt);
            }
        });
        login_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                login_labelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                login_labelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                login_labelMouseExited(evt);
            }
        });

        email_error.setBackground(new java.awt.Color(255, 255, 255));
        email_error.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        email_error.setForeground(new java.awt.Color(208, 1, 1));
        email_error.setText("Email Error");

        confrim_password_error.setBackground(new java.awt.Color(255, 255, 255));
        confrim_password_error.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        confrim_password_error.setForeground(new java.awt.Color(208, 1, 1));
        confrim_password_error.setText("Confirm Password Error");

        password_error.setBackground(new java.awt.Color(255, 255, 255));
        password_error.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        password_error.setForeground(new java.awt.Color(208, 1, 1));
        password_error.setText("Password Error");

        msg.setBackground(new java.awt.Color(255, 255, 255));
        msg.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        msg.setForeground(new java.awt.Color(26, 165, 0));
        msg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        msg.setText("User Created Successfully !");
        msg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 94, 4)));
        msg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(325, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(password_error)
                    .addComponent(showPass)
                    .addComponent(email_error)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(login_label)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(confrim_password_error)
                                .addComponent(input_email, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                .addComponent(input_password, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                .addComponent(signup_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(input_confirm_password, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)))))
                .addGap(325, 325, 325))
            .addGroup(layout.createSequentialGroup()
                .addGap(350, 350, 350)
                .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(349, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(input_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(email_error)
                .addGap(15, 15, 15)
                .addComponent(input_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(password_error)
                .addGap(15, 15, 15)
                .addComponent(input_confirm_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(confrim_password_error)
                .addGap(10, 10, 10)
                .addComponent(showPass)
                .addGap(15, 15, 15)
                .addComponent(signup_button, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(msg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(login_label)
                .addContainerGap(60, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void input_emailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_input_emailFocusGained

        if (input_email.getText().equals("Email"))
        {
            email_correct = false;
            input_email.setText("");
            input_email.setForeground(jLabel1.getForeground());
        }
    }//GEN-LAST:event_input_emailFocusGained

    private void input_emailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_input_emailFocusLost
        
        if (input_email.getText().equals(""))
        {
            email_correct = false;
            input_email.setText("Email");
            input_email.setForeground(new Color(153,153,153));
        }

        if (!input_email.getText().equals("") && !input_email.getText().equals("Email"))
        {
            Matcher matcher = pattern.matcher(input_email.getText());

            if (!matcher.matches())
            {
                email_error.setVisible(true);  
                email_error.setText("Invalid Email");
                email_correct = false;
            }
            else
            {
                email_error.setVisible(false);
                email_correct = true;
            }
        }
    }//GEN-LAST:event_input_emailFocusLost

    private void input_emailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_emailKeyReleased
        if (!input_email.getText().equals("") && !input_email.getText().equals("Email"))
        {
            Matcher matcher = pattern.matcher(input_email.getText());

            if (!matcher.matches())
            {
                email_correct = false;
            }
            else
            {
                email_correct = true;
            }
        }
        else
            email_error.setVisible(false);
    }//GEN-LAST:event_input_emailKeyReleased

    private void input_passwordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_input_passwordFocusGained
        temp_pass = new String(input_password.getPassword());
        if (temp_pass.equals("Master Password"))
        {
            pass_correct = false;
            input_password.setText("");
            input_password.setForeground(jLabel1.getForeground());
        }
        temp_pass = ""; 
    }//GEN-LAST:event_input_passwordFocusGained

    private void input_passwordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_input_passwordFocusLost
        temp_pass = new String(input_password.getPassword());
        if (temp_pass.equals(""))
        {
            pass_correct = false;
            input_password.setText("Master Password");
            input_password.setEchoChar((char) 0);
            input_password.setForeground(new Color(153,153,153));
        }

        if (!temp_pass.equals("") && !temp_pass.equals("Master Password"))
        {

            if (temp_pass.length() < password_length)
            {
                password_error.setVisible(true);  
                password_error.setText("Password must be " + password_length +" characters or more");
                pass_correct = false;
            }
            else
            {
                password_error.setVisible(false);
                pass_correct = true;
            }
        }

        temp_pass = "";
    }//GEN-LAST:event_input_passwordFocusLost

    private void input_passwordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_passwordKeyTyped
        temp_pass = new String(input_password.getPassword());

        if (!temp_pass.equals("Master Password"))
        {
            if (showPass.isSelected())
            {
                input_password.setEchoChar((char) 0);
            }
            else
            {
                input_password.setEchoChar('\u25cf');
            }
        }
        else
        {
            input_password.setEchoChar((char) 0);
        }
    }//GEN-LAST:event_input_passwordKeyTyped

    private void input_passwordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_passwordKeyReleased
        temp_pass = new String(input_password.getPassword());

        if (!temp_pass.equals("") && !temp_pass.equals("Master Password"))
        {

            if (temp_pass.length() < password_length)
            {
                pass_correct = false;
            }
            else
            {
                pass_correct = true;
            }
        }
        else
            password_error.setVisible(false);
    }//GEN-LAST:event_input_passwordKeyReleased

    private void input_confirm_passwordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_input_confirm_passwordFocusGained
        temp_confirm_pass = new String(input_confirm_password.getPassword());

        if (temp_confirm_pass.equals("Confirm Master Password"))
        {
            
            confirm_pass_correct = false;
            input_confirm_password.setText("");
            input_confirm_password.setForeground(jLabel1.getForeground());
        }

        temp_confirm_pass = "";
    }//GEN-LAST:event_input_confirm_passwordFocusGained

    private void input_confirm_passwordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_input_confirm_passwordFocusLost
        temp_confirm_pass = new String(input_confirm_password.getPassword());
        temp_pass = new String(input_password.getPassword());

        if (temp_confirm_pass.equals(""))
        {
            confirm_pass_correct = false;
            input_confirm_password.setText("Confirm Master Password");
            input_confirm_password.setEchoChar((char) 0);
            input_confirm_password.setForeground(new Color(153,153,153));
        }

        if (!temp_confirm_pass.equals("") && !temp_confirm_pass.equals("Confirm Master Password"))
        {

            if (!temp_confirm_pass.equals(temp_pass))
            {
                confrim_password_error.setVisible(true);  
                confrim_password_error.setText("Passwords didn’t match. Try again");
                confirm_pass_correct = false;
            }
            else
            {
                confrim_password_error.setVisible(false);
                confirm_pass_correct = true;
            }
        }
    }//GEN-LAST:event_input_confirm_passwordFocusLost
	
    private void input_confirm_passwordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_confirm_passwordKeyTyped
        temp_confirm_pass = new String(input_confirm_password.getPassword());

        if (!temp_confirm_pass.equals("Confirm Master Password"))
        {
            if (showPass.isSelected())
            {
                input_confirm_password.setEchoChar((char) 0);
            }
            else
            {
                input_confirm_password.setEchoChar('\u25cf');
            }
        }
        else
        {
            input_confirm_password.setEchoChar((char) 0);
        }
    }//GEN-LAST:event_input_confirm_passwordKeyTyped
	
    private void input_confirm_passwordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_confirm_passwordKeyReleased
        temp_confirm_pass = new String(input_confirm_password.getPassword());
        temp_pass = new String(input_password.getPassword());

        if (!temp_confirm_pass.equals("") && !temp_confirm_pass.equals("Confirm Master Password"))
        {
            if (!temp_confirm_pass.equals(temp_pass))
            {
                confirm_pass_correct = false;
            }
            else
            {
                confirm_pass_correct = true;
            }
        }
        else
            confrim_password_error.setVisible(false);
    }//GEN-LAST:event_input_confirm_passwordKeyReleased

    private void showPassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_showPassItemStateChanged
        temp_pass = new String(input_password.getPassword());
        temp_confirm_pass = new String(input_confirm_password.getPassword());

        if (!temp_pass.equals("Master Password"))
        {
            if (showPass.isSelected())
            {
                input_password.setEchoChar((char) 0);
            }
            else
            {
                input_password.setEchoChar('\u25cf');
            }
        }
        else
        {
            input_password.setEchoChar((char) 0);
        }

        if (!temp_confirm_pass.equals("Confirm Master Password"))
        {
            if (showPass.isSelected())
            {
                input_confirm_password.setEchoChar((char) 0);
            }
            else
            {
                input_confirm_password.setEchoChar('\u25cf');
            }
        }
        else
        {
            input_confirm_password.setEchoChar((char) 0);
        }

    }//GEN-LAST:event_showPassItemStateChanged

    private void signup_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signup_buttonActionPerformed

        if (email_correct && pass_correct && confirm_pass_correct)
        {
            if (new File("Databases\\users.db").exists())
            {
                initRegistration();
            }
            else
            {
                java.awt.Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Users Database not Found !", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            setMsg(msg, " Enter Email and Master Password ", "RED", 2);
        }
    }//GEN-LAST:event_signup_buttonActionPerformed
	
    private void login_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_labelMouseClicked
        login = new Login();
        PassCryptPasswordManager.obj.MainPanel.removeAll();
        PassCryptPasswordManager.obj.MainPanel.add(login);
        PassCryptPasswordManager.obj.MainPanel.revalidate();
        PassCryptPasswordManager.obj.MainPanel.repaint();
    }//GEN-LAST:event_login_labelMouseClicked

    private void login_labelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_labelMouseEntered
        login_label.setFont(new java.awt.Font("Arial", 1, 12));
    }//GEN-LAST:event_login_labelMouseEntered

    private void login_labelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_login_labelMouseExited
        login_label.setFont(new java.awt.Font("Arial", 0, 12));
    }//GEN-LAST:event_login_labelMouseExited

    private void login_labelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_login_labelFocusGained
        login_label.setFont(new java.awt.Font("Arial", 1, 12));
    }//GEN-LAST:event_login_labelFocusGained

    private void login_labelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_login_labelFocusLost
        login_label.setFont(new java.awt.Font("Arial", 0, 12));
    }//GEN-LAST:event_login_labelFocusLost

    public void initRegistration()
    {
        value_email = MD5Hash.getMd5(input_email.getText());
        value_password = MD5Hash.getMd5(new String(input_password.getPassword()));
        String temp[] = input_email.getText().split("@",2);
        value_dbname = CaesarCipher.encrypt_shuffle(temp[0]);
        url = "jdbc:sqlite:Databases/users.db";
        registerUser();
    }

    public void registerUser()
    {
        try 
        {   
                Connection con = DriverManager.getConnection(url); 
                //System.out.println("Connection to SQLite has been established.");  

                String query = "INSERT into users (emailid, password,dbname,temp) values (?,?,?,?)";
                PreparedStatement pst = con.prepareStatement(query);
                pst.setString(1, value_email);
                pst.setString(2, value_password);
                pst.setString(3, value_dbname);
                pst.setString(4, AES256.encrypt(new String(input_password.getPassword()), "1!2@3#4$5%6^7&8*"));
                pst.execute();
                pst.close();
                createDB(value_dbname);

                setMsg(msg, " User Created Successfully ! ", "GREEN", 0);

                input_email.setText(""); input_email.requestFocus();
                input_password.setText(""); input_password.requestFocus();
                input_confirm_password.setText(""); input_confirm_password.requestFocus();
                signup_button.requestFocus();

                new java.util.Timer().schedule(
                    new java.util.TimerTask() {
                        @Override
                        public void run() {
                            login = new Login();
                            PassCryptPasswordManager.obj.MainPanel.removeAll();
                            PassCryptPasswordManager.obj.MainPanel.add(login);
                            PassCryptPasswordManager.obj.MainPanel.revalidate();
                            PassCryptPasswordManager.obj.MainPanel.repaint();
                        }
                    },
                   700
                );
        } 
        catch (SQLException e) 
        {  
                //System.out.println(e.getMessage());
                if (new String(e.getMessage()).equals("[SQLITE_CONSTRAINT_UNIQUE]  A UNIQUE constraint failed (UNIQUE constraint failed: users.emailid)"))
                {    

                    setMsg(msg, " User Already Exists ! ", "RED", 4);
                    input_email.setText(""); input_email.requestFocus();
                    input_password.setText(""); input_password.requestFocus();
                    input_confirm_password.setText(""); input_confirm_password.requestFocus();
                    signup_button.requestFocus();
                }
                if (new String(e.getMessage()).equals("[SQLITE_CONSTRAINT_UNIQUE]  A UNIQUE constraint failed (UNIQUE constraint failed: users.dbname)"))
                {    
                    initRegistration();
                }
        }

    }

    public void createDB(String dbname)
    {
		url = "jdbc:sqlite:Databases/" + dbname + ".db";

		Statement stmt = null;
		try (Connection conn = DriverManager.getConnection(url)) 
		{
			if (conn != null) 
			{
				System.out.println("A new database has been created.");  
				String sql = "CREATE TABLE credentials (ID INTEGER PRIMARY KEY AUTOINCREMENT, Title CHAR(50), Username CHAR(60), Password CHAR(60));";  

				try
				{    
					stmt = conn.createStatement();  
					stmt.execute(sql);  
				} 
				catch (SQLException e) 
				{  
					System.out.println(e.getMessage());  
				} 
			}
		} 
		catch (SQLException e) 
		{
			System.out.println(e.getMessage());
		}
        finally
        {
            try
            {
                stmt.close();
            }
            catch(Exception e){System.out.println(e.getMessage());}
        }
    }

    private void setMsg(JLabel label ,String text, String color, int timeout)
    {
        if (color.equals("RED"))
        {
            label.setForeground(new Color(255,36,0));
            label.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(255,36,0)));
        }
        else if (color.equals("GREEN"))
        {
            label.setForeground(new Color(26,165,0));
            label.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(0, 94, 4)));
        }
        
        label.setText(text);
        label.setVisible(true);

        if (timeout > 0)
        {
            timeout = timeout * 1000;

            new java.util.Timer().schedule( 
                new java.util.TimerTask() {
                    @Override
                    public void run() {
                        label.setVisible(false);
                    }
                }, 
                timeout 
                );
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel confrim_password_error;
    private javax.swing.JLabel email_error;
    private javax.swing.JPasswordField input_confirm_password;
    private javax.swing.JTextField input_email;
    private javax.swing.JPasswordField input_password;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel login_label;
    private javax.swing.JLabel msg;
    private javax.swing.JLabel password_error;
    private javax.swing.JCheckBox showPass;
    private javax.swing.JButton signup_button;
    // End of variables declaration//GEN-END:variables
}
