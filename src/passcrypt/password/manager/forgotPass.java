/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package passcrypt.password.manager;

import static com.sun.java.accessibility.util.AWTEventMonitor.addWindowListener;
import java.awt.Color;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.IOException;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.activation.*;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author C0delust
 */
public class forgotPass extends javax.swing.JPanel {

    /**
     * Creates new form Login
     */
    private Register signup;
    private CardView cred_view;
    private Login login;
    private boolean email_correct, otp_correct, pass_correct, confirm_pass_correct;
    private String regex = "^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@"
            + "[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$";
    private Pattern pattern = Pattern.compile(regex);
    private int password_length = 6;
    private String temp_otp, temp_pass, temp_confirm_pass;
    private String url, value_email, value_password, value_dbname, value_temppassword;
    private int otp = 123456789;

    public forgotPass() {
        initComponents();

        email_error.setVisible(false);
        otp_error.setVisible(false);
        msg1.setVisible(false);
        loading1.setVisible(false);
        input_otp.setEnabled(false);
        p1.setVisible(true);

        p2.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        login_label = new javax.swing.JLabel();
        p1 = new javax.swing.JPanel();
        input_email = new javax.swing.JTextField();
        email_error = new javax.swing.JLabel();
        otp_button = new javax.swing.JButton();
        input_otp = new javax.swing.JTextField();
        otp_error = new javax.swing.JLabel();
        msg1 = new javax.swing.JLabel();
        loading1 = new javax.swing.JLabel();
        p2 = new javax.swing.JPanel();
        input_password = new javax.swing.JPasswordField();
        password_error = new javax.swing.JLabel();
        input_confirm_password = new javax.swing.JPasswordField();
        confrim_password_error = new javax.swing.JLabel();
        showPass = new javax.swing.JCheckBox();
        reset_button = new javax.swing.JButton();
        msg2 = new javax.swing.JLabel();
        loading2 = new javax.swing.JLabel();

        setFocusCycleRoot(true);
        setFocusTraversalPolicyProvider(true);
        setMinimumSize(new java.awt.Dimension(900, 561));
        setName(""); // NOI18N
        setNextFocusableComponent(otp_button);
        setPreferredSize(new java.awt.Dimension(900, 561));

        jLabel1.setFont(new java.awt.Font("Advent Pro", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Forgot Password");

        login_label.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        login_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_label.setText("Go to Login!");
        login_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                login_labelMouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                login_labelMouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                login_labelMouseExited(evt);
            }
        });

        input_email.setDocument(new CharacterLimit(100));
        input_email.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        input_email.setForeground(new java.awt.Color(153, 153, 153));
        input_email.setText("Email");
        input_email.setMargin(new java.awt.Insets(8, 10, 8, 10));
        input_email.setMinimumSize(new java.awt.Dimension(56, 35));
        input_email.setName(""); // NOI18N
        input_email.setNextFocusableComponent(otp_button);
        input_email.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                input_emailFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                input_emailFocusLost(evt);
            }
        });
        input_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                input_emailKeyReleased(evt);
            }
        });

        email_error.setBackground(new java.awt.Color(255, 255, 255));
        email_error.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        email_error.setForeground(new java.awt.Color(208, 1, 1));
        email_error.setText("Email Error");

        otp_button.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        otp_button.setText("Send OTP");
        otp_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otp_buttonActionPerformed(evt);
            }
        });

        input_otp.setDocument(new CharacterLimit(6));
        input_otp.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        input_otp.setForeground(new java.awt.Color(153, 153, 153));
        input_otp.setText("OTP");
        input_otp.setMargin(new java.awt.Insets(8, 10, 8, 10));
        input_otp.setMinimumSize(new java.awt.Dimension(56, 35));
        input_otp.setName(""); // NOI18N
        input_otp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                input_otpFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                input_otpFocusLost(evt);
            }
        });
        input_otp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                input_otpKeyReleased(evt);
            }
        });

        otp_error.setBackground(new java.awt.Color(255, 255, 255));
        otp_error.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        otp_error.setForeground(new java.awt.Color(208, 1, 1));
        otp_error.setText("OTP Error");

        msg1.setBackground(new java.awt.Color(255, 255, 255));
        msg1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        msg1.setForeground(new java.awt.Color(26, 165, 0));
        msg1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        msg1.setText("User Login Successful");
        msg1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 94, 4)));
        msg1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        loading1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loading1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/passcrypt/password/manager/loading.gif"))); // NOI18N
        loading1.setOpaque(true);

        javax.swing.GroupLayout p1Layout = new javax.swing.GroupLayout(p1);
        p1.setLayout(p1Layout);
        p1Layout.setHorizontalGroup(
                p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(msg1, javax.swing.GroupLayout.PREFERRED_SIZE, 190,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(loading1, javax.swing.GroupLayout.PREFERRED_SIZE, 250,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(otp_error)
                                        .addComponent(input_otp, javax.swing.GroupLayout.PREFERRED_SIZE, 250,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(otp_button, javax.swing.GroupLayout.PREFERRED_SIZE, 250,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(email_error)
                                        .addComponent(input_email, javax.swing.GroupLayout.PREFERRED_SIZE, 250,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))));
        p1Layout.setVerticalGroup(
                p1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(p1Layout.createSequentialGroup()
                                .addComponent(input_email, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(email_error)
                                .addGap(20, 20, 20)
                                .addComponent(otp_button, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(input_otp, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(otp_error)
                                .addGap(20, 20, 20)
                                .addComponent(msg1)
                                .addGap(40, 40, 40)
                                .addComponent(loading1)
                                .addGap(0, 0, 0)));

        input_password.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        input_password.setForeground(new java.awt.Color(153, 153, 153));
        input_password.setText("New Master Password");
        input_password.setToolTipText("");
        input_password.setEchoChar((char) 0);
        input_password.setMargin(new java.awt.Insets(8, 10, 8, 10));
        input_password.setNextFocusableComponent(input_confirm_password);
        input_password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                input_passwordFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                input_passwordFocusLost(evt);
            }
        });
        input_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                input_passwordKeyReleased(evt);
            }
        });

        password_error.setBackground(new java.awt.Color(255, 255, 255));
        password_error.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        password_error.setForeground(new java.awt.Color(208, 1, 1));
        password_error.setText("Password Error");

        input_confirm_password.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        input_confirm_password.setForeground(new java.awt.Color(153, 153, 153));
        input_confirm_password.setText("Confirm Master Password");
        input_confirm_password.setEchoChar((char) 0);
        input_confirm_password.setHighlighter(null);
        input_confirm_password.setMargin(new java.awt.Insets(8, 10, 8, 10));
        input_confirm_password.setNextFocusableComponent(reset_button);
        input_confirm_password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                input_confirm_passwordFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                input_confirm_passwordFocusLost(evt);
            }
        });
        input_confirm_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                input_confirm_passwordKeyReleased(evt);
            }
        });

        confrim_password_error.setBackground(new java.awt.Color(255, 255, 255));
        confrim_password_error.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        confrim_password_error.setForeground(new java.awt.Color(208, 1, 1));
        confrim_password_error.setText("Confirm Password Error");

        showPass.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        showPass.setText("Show Password");
        showPass.setOpaque(false);
        showPass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showPassItemStateChanged(evt);
            }
        });

        reset_button.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        reset_button.setText("Reset Password");
        reset_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_buttonActionPerformed(evt);
            }
        });

        msg2.setBackground(new java.awt.Color(255, 255, 255));
        msg2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        msg2.setForeground(new java.awt.Color(26, 165, 0));
        msg2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        msg2.setText("User Login Successful");
        msg2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 94, 4)));
        msg2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        loading2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loading2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/passcrypt/password/manager/loading.gif"))); // NOI18N
        loading2.setOpaque(true);

        javax.swing.GroupLayout p2Layout = new javax.swing.GroupLayout(p2);
        p2.setLayout(p2Layout);
        p2Layout.setHorizontalGroup(
                p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(reset_button, javax.swing.GroupLayout.PREFERRED_SIZE, 250,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(showPass)
                                        .addComponent(confrim_password_error)
                                        .addComponent(input_confirm_password, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(password_error)
                                        .addComponent(input_password, javax.swing.GroupLayout.PREFERRED_SIZE, 250,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(p2Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(msg2, javax.swing.GroupLayout.PREFERRED_SIZE, 190,
                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(loading2, javax.swing.GroupLayout.PREFERRED_SIZE, 250,
                                javax.swing.GroupLayout.PREFERRED_SIZE));
        p2Layout.setVerticalGroup(
                p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(p2Layout.createSequentialGroup()
                                .addComponent(input_password, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(password_error)
                                .addGap(15, 15, 15)
                                .addComponent(input_confirm_password, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(confrim_password_error)
                                .addGap(10, 10, 10)
                                .addComponent(showPass)
                                .addGap(25, 25, 25)
                                .addComponent(reset_button, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(msg2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40,
                                        Short.MAX_VALUE)
                                .addComponent(loading2)
                                .addGap(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(33, Short.MAX_VALUE)
                                .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(325, 325, 325))
                        .addComponent(login_label, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(jLabel1)
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(17, 17, 17)
                                .addComponent(login_label)
                                .addContainerGap()));
    }// </editor-fold>//GEN-END:initComponents

    private void input_emailFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_input_emailFocusGained

        if (input_email.getText().equals("Email")) {
            input_email.setText("");
            input_email.setForeground(jLabel1.getForeground());
        }
    }// GEN-LAST:event_input_emailFocusGained

    private void input_emailFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_input_emailFocusLost
        if (input_email.getText().equals("")) {
            input_email.setText("Email");
            input_email.setForeground(new Color(153, 153, 153));
        }

        if (!input_email.getText().equals("") && !input_email.getText().equals("Email")) {
            Matcher matcher = pattern.matcher(input_email.getText());

            if (!matcher.matches()) {
                email_error.setVisible(true);
                email_error.setText("Invalid Email");
                email_correct = false;
            } else {
                email_error.setVisible(false);
                email_correct = true;
            }
        }
    }// GEN-LAST:event_input_emailFocusLost

    private void input_passwordFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_input_passwordFocusGained
        temp_pass = new String(input_password.getPassword());
        if (temp_pass.equals("New Master Password")) {
            input_password.setEchoChar('\u25cf');
            input_password.setText("");
            input_password.setForeground(jLabel1.getForeground());
        }
        temp_pass = "";
    }// GEN-LAST:event_input_passwordFocusGained

    private void input_passwordFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_input_passwordFocusLost
        temp_pass = new String(input_password.getPassword());
        if (temp_pass.equals("")) {
            input_password.setText("New Master Password");
            input_password.setEchoChar((char) 0);
            input_password.setForeground(new Color(153, 153, 153));
        }

        if (!temp_pass.equals("") && !temp_pass.equals("New Master Password")) {

            if (temp_pass.length() < password_length) {
                password_error.setVisible(true);
                password_error.setText("Password must be " + password_length + " characters or more");
                pass_correct = false;
            } else {
                password_error.setVisible(false);
                pass_correct = true;
            }
        }

        temp_pass = "";
    }// GEN-LAST:event_input_passwordFocusLost

    private void login_labelMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_login_labelMouseClicked
        login = new Login();
        PassCryptPasswordManager.obj.MainPanel.removeAll();
        PassCryptPasswordManager.obj.MainPanel.add(login);
        PassCryptPasswordManager.obj.MainPanel.revalidate();
        PassCryptPasswordManager.obj.MainPanel.repaint();
    }// GEN-LAST:event_login_labelMouseClicked

    private void otp_buttonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_otp_buttonActionPerformed
        if (new File("Databases\\users.db").exists()) {
            if (email_correct) {
                input_otp.setEnabled(false);
                login_label.setVisible(false);
                init();
            }

        } else {
            login_label.setVisible(true);
            JOptionPane.showMessageDialog(this, "Users Database not Found !", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_otp_buttonActionPerformed

    public void init() {
        loading2.setVisible(true);
        new java.util.Timer().schedule(
                new java.util.TimerTask() {
                    @Override
                    public void run() {
                        checkEmail();
                    }
                },
                50);
    }

    public void checkEmail() {
        value_email = MD5Hash.getMd5(input_email.getText());
        url = "jdbc:sqlite:Databases/users.db";

        ResultSet rs = null;
        PreparedStatement pst = null;
        Connection con = null;
        try {
            con = DriverManager.getConnection(url);
            System.out.println("Connection to SQLite has been established.");

            String query = "SELECT emailid, password,dbname,temp FROM users WHERE emailid = ?";
            pst = con.prepareStatement(query);
            pst.setString(1, value_email);
            rs = pst.executeQuery();

            if (rs.next()) {
                msg1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 94, 4)));
                msg1.setForeground(new Color(26, 165, 0));
                msg1.setText("Email Found !");
                msg1.setVisible(true);

                value_dbname = rs.getString("dbname");
                value_temppassword = rs.getString("temp");
                rs.close();
                pst.close();
                con.close();
                sendOTP(input_email.getText());
            } else {
                msg1.setForeground(Color.red);
                msg1.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                msg1.setText("Email not Found !");
                msg1.setVisible(true);
                loading1.setVisible(false);
                login_label.setVisible(true);
                new java.util.Timer().schedule(
                        new java.util.TimerTask() {
                            @Override
                            public void run() {
                                msg1.setVisible(false);
                            }
                        },
                        1000);
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                rs.close();
                pst.close();
            } catch (Exception e) {
            }
        }
    }

    public void sendOTP(String to) {
        otp = generateOTP();
        String from = ""; // from address. As this is using Gmail SMTP.
        String password = ""; // password for from mail address.
        String body = "<b>Forgot your Password ?</b><br>We have received your request to reset the password for your account.<br><br>To reset your password, enter the below given 6 - digits OTP to verify your PassCrypt Account.<br><br><b style = \"font-size: 25px; color: #0263d1; text-align: center\"> ###### </b> <br><br>Note:</b> OTP is valid for 5 Minutes only!";

        body = body.replace("######", Integer.toString(otp));

        Properties prop = new Properties();
        prop.put("mail.smtp.host", "smtp.gmail.com");
        prop.put("mail.smtp.starttls.enable", "true");
        prop.put("mail.smtp.port", "587");
        prop.put("mail.smtp.ssl.protocols", "TLSv1.2");
        prop.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        prop.put("mail.smtp.auth", "true");

        // prop.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        // prop.put("mail.smtp.socketFactory.port", "465");
        Session session = Session.getInstance(prop, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(from, password);
            }
        });

        // session.setDebug(true);
        try {

            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(from));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
            message.setSubject("PassCrypt - Password Manager");

            MimeBodyPart mimeBodyPart = new MimeBodyPart();
            mimeBodyPart.setContent(body, "text/html");

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(mimeBodyPart);

            /*
             * MimeBodyPart attachmentBodyPart = new MimeBodyPart();
             * attachmentBodyPart.attachFile(new
             * File("C://Users//C0delust//Downloads//3269182.jpg"));
             * multipart.addBodyPart(attachmentBodyPart);
             */
            message.setContent(multipart);

            otp_button.setEnabled(false);
            loading1.setVisible(true);
            msg1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 94, 4)));
            msg1.setForeground(new Color(26, 165, 0));
            msg1.setText("Sending mail.....!");
            msg1.setVisible(true);

            Transport.send(message);

            msg1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 94, 4)));
            msg1.setForeground(new Color(26, 165, 0));
            msg1.setText("Mail Successfully sent!");
            msg1.setVisible(true);
            loading1.setVisible(false);
            otp_button.setEnabled(true);
            input_otp.setEnabled(true);

            expireOTP();

        } catch (MessagingException e) {
            // e.printStackTrace();
            System.out.println(e.getMessage());
            otp_button.setEnabled(true);
            msg1.setForeground(Color.red);
            msg1.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
            msg1.setText("Failed to send Mail!");
            msg1.setVisible(true);
            loading1.setVisible(false);
            new java.util.Timer().schedule(
                    new java.util.TimerTask() {
                        @Override
                        public void run() {
                            msg1.setVisible(false);
                            loading1.setVisible(false);
                        }
                    },
                    1000);
        }

    }

    public int generateOTP() {
        int min = 100000;
        int max = 999999;
        return (int) ((Math.random() * (max - min)) + min);
    }

    public void expireOTP() {
        new java.util.Timer().schedule(
                new java.util.TimerTask() {
                    @Override
                    public void run() {
                        otp = 123456789;
                        System.out.println("OTP expired");
                    }
                },
                300000 // 5 Minutes
        );
    }

    private void input_emailKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_input_emailKeyReleased
        if (!input_email.getText().equals("") && !input_email.getText().equals("Email")) {
            Matcher matcher = pattern.matcher(input_email.getText());

            if (!matcher.matches()) {
                email_correct = false;
            } else {
                email_correct = true;
            }
        }
    }// GEN-LAST:event_input_emailKeyReleased

    private void input_passwordKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_input_passwordKeyReleased
        temp_pass = new String(input_password.getPassword());

        if (!temp_pass.equals("") && !temp_pass.equals("Master Password")) {

            if (temp_pass.length() < password_length) {
                pass_correct = false;
            } else {
                pass_correct = true;
            }
        }
    }// GEN-LAST:event_input_passwordKeyReleased

    private void input_confirm_passwordFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_input_confirm_passwordFocusGained
        temp_confirm_pass = new String(input_confirm_password.getPassword());
        if (temp_confirm_pass.equals("Confirm Master Password")) {
            input_confirm_password.setEchoChar('\u25cf');
            input_confirm_password.setText("");
            input_confirm_password.setForeground(jLabel1.getForeground());
        }

        temp_confirm_pass = "";
    }// GEN-LAST:event_input_confirm_passwordFocusGained

    private void input_confirm_passwordFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_input_confirm_passwordFocusLost
        temp_confirm_pass = new String(input_confirm_password.getPassword());
        temp_pass = new String(input_password.getPassword());

        if (temp_confirm_pass.equals("")) {
            input_confirm_password.setText("Confirm Master Password");
            input_confirm_password.setEchoChar((char) 0);
            input_confirm_password.setForeground(new Color(153, 153, 153));
        }

        if (!temp_confirm_pass.equals("") && !temp_confirm_pass.equals("Confirm Master Password")) {

            if (!temp_confirm_pass.equals(temp_pass)) {
                confrim_password_error.setVisible(true);
                confrim_password_error.setText("Passwords didn’t match. Try again");
                confirm_pass_correct = false;
            } else {
                confrim_password_error.setVisible(false);
                confirm_pass_correct = true;
            }
        }
    }// GEN-LAST:event_input_confirm_passwordFocusLost

    private void input_confirm_passwordKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_input_confirm_passwordKeyReleased
        temp_confirm_pass = new String(input_confirm_password.getPassword());
        temp_pass = new String(input_password.getPassword());

        if (!temp_confirm_pass.equals("") && !temp_confirm_pass.equals("Confirm Master Password")) {
            if (!temp_confirm_pass.equals(temp_pass)) {
                confirm_pass_correct = false;
            } else {
                confirm_pass_correct = true;
            }
        }
    }// GEN-LAST:event_input_confirm_passwordKeyReleased

    private void showPassItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_showPassItemStateChanged
        temp_pass = new String(input_password.getPassword());
        temp_confirm_pass = new String(input_confirm_password.getPassword());
        if (!temp_pass.equals("New Master Password") || !temp_confirm_pass.equals("Confirm Master Password")) {
            if (showPass.isSelected()) {
                input_password.setEchoChar((char) 0);
                input_confirm_password.setEchoChar((char) 0);
                new java.util.Timer().schedule(
                        new java.util.TimerTask() {
                            @Override
                            public void run() {
                                if (!temp_pass.equals("New Master Password")) {
                                    input_password.setEchoChar('\u25cf');
                                }
                                if (!temp_confirm_pass.equals("Confirm Master Password")) {
                                    input_confirm_password.setEchoChar('\u25cf');
                                }
                                showPass.setSelected(false);
                            }
                        },
                        3000);
            } else {
                if (!temp_pass.equals("New Master Password")) {
                    input_password.setEchoChar('\u25cf');
                }
                if (!temp_confirm_pass.equals("Confirm Master Password")) {
                    input_confirm_password.setEchoChar('\u25cf');
                }
            }
        }
    }// GEN-LAST:event_showPassItemStateChanged

    private void input_otpFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_input_otpFocusGained
        if (input_otp.getText().equals("OTP")) {
            input_otp.setText("");
            input_otp.setForeground(jLabel1.getForeground());
        }
    }// GEN-LAST:event_input_otpFocusGained

    private void input_otpFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_input_otpFocusLost
        temp_otp = input_otp.getText();

        if (temp_otp.equals("")) {
            input_otp.setText("OTP");
            input_otp.setForeground(new Color(153, 153, 153));
        }

        if (!temp_otp.equals("") && !temp_otp.equals("OTP")) {

            if (temp_otp.length() < 6) {
                otp_error.setVisible(true);
                otp_error.setText("OTP must be 6 of Digits");
                otp_correct = false;
                new java.util.Timer().schedule(
                        new java.util.TimerTask() {
                            @Override
                            public void run() {
                                otp_error.setVisible(false);
                            }
                        },
                        2000);
            } else {
                otp_error.setVisible(false);
                otp_correct = true;
            }
        }
    }// GEN-LAST:event_input_otpFocusLost

    private void input_otpKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_input_otpKeyReleased
        temp_otp = input_otp.getText();

        if (!temp_otp.equals("") && !temp_otp.equals("OTP")) {

            if (temp_otp.length() < 6) {
                otp_correct = false;
            } else {
                otp_correct = true;
            }
        }

        if (temp_otp.equals(Integer.toString(otp))) {
            msg1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 94, 4)));
            msg1.setForeground(new Color(26, 165, 0));
            msg1.setVisible(true);
            msg1.setText("Valid OTP!");
            loading1.setVisible(true);
            new java.util.Timer().schedule(
                    new java.util.TimerTask() {
                        @Override
                        public void run() {
                            loading1.setVisible(false);
                            msg1.setVisible(false);
                            p1.setVisible(false);
                            p2.setVisible(true);
                            password_error.setVisible(false);
                            confrim_password_error.setVisible(false);
                            msg2.setVisible(false);
                            loading2.setVisible(false);
                            input_otp.setEnabled(false);
                            set_p2_layout();
                        }
                    },
                    1000);
        }
        if (temp_otp.length() == 6 && !temp_otp.equals(Integer.toString(otp))) {
            msg1.setVisible(true);
            msg1.setForeground(Color.red);
            msg1.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
            msg1.setText("Invalid OTP!");
            new java.util.Timer().schedule(
                    new java.util.TimerTask() {
                        @Override
                        public void run() {
                            msg1.setVisible(false);
                        }
                    },
                    2000);
        }
    }// GEN-LAST:event_input_otpKeyReleased

    private void reset_buttonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_reset_buttonActionPerformed
        if (pass_correct && confirm_pass_correct) {

            input_password.setEnabled(false);
            input_confirm_password.setEnabled(false);
            reset_button.setEnabled(false);
            loading2.setVisible(true);
            msg2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 94, 4)));
            msg2.setForeground(new Color(26, 165, 0));
            msg2.setText("Changing Password....");
            msg2.setVisible(true);

            new java.util.Timer().schedule(
                    new java.util.TimerTask() {
                        @Override
                        public void run() {
                            changePassword();
                        }
                    },
                    100);

        }
    }// GEN-LAST:event_reset_buttonActionPerformed

    private void login_labelMouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_login_labelMouseEntered
        login_label.setFont(new java.awt.Font("Arial", 1, 12));
    }// GEN-LAST:event_login_labelMouseEntered

    private void login_labelMouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_login_labelMouseExited
        login_label.setFont(new java.awt.Font("Arial", 0, 12));
    }// GEN-LAST:event_login_labelMouseExited

    private void set_p2_layout() {
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(33, Short.MAX_VALUE)
                                .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(325, 325, 325))
                        .addComponent(login_label, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addComponent(jLabel1)
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15)
                                .addComponent(login_label)
                                .addContainerGap()));
    }

    private void changePassword() {
        PreparedStatement pst = null;
        Connection con = null;

        value_email = MD5Hash.getMd5(input_email.getText());
        value_password = MD5Hash.getMd5(new String(input_password.getPassword()));
        url = "jdbc:sqlite:Databases/users.db";

        try {
            con = DriverManager.getConnection(url);
            String query = "UPDATE users SET password = ? WHERE emailid = ?;";
            pst = con.prepareStatement(query);
            pst.setString(1, value_password);
            pst.setString(2, value_email);
            pst.execute();
            pst.close();
            con.close();

            System.out.println("Password Changed");
            changeDecryptionKey(value_email, new String(input_password.getPassword()), value_dbname,
                    value_temppassword);
            updateTemp();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void changeDecryptionKey(String email, String pass, String dbname, String pass_temp) {
        PreparedStatement pst1, pst2 = null;
        Connection con1, con2 = null;
        ResultSet rs1, rs2 = null;
        url = "jdbc:sqlite:Databases/" + value_dbname + ".db";
        int id;
        String v1, v2, v3;

        try {
            con1 = DriverManager.getConnection(url);
            con2 = DriverManager.getConnection(url);
            String query1 = "SELECT * FROM credentials";
            pst1 = con1.prepareStatement(query1);
            rs1 = pst1.executeQuery();

            String temp_pass = AES256.decrypt(pass_temp, "1!2@3#4$5%6^7&8*");
            String query2;

            while (rs1.next()) {
                id = rs1.getInt("ID");
                v1 = rs1.getString("Title");
                v2 = rs1.getString("Username");
                v3 = rs1.getString("Password");

                query2 = "UPDATE credentials SET Title = ?, Username = ?, Password = ? WHERE ID = ?;";
                pst2 = con1.prepareStatement(query2);
                pst2.setString(1, AES256.encrypt(AES256.decrypt(v1, temp_pass), pass));
                pst2.setString(2, AES256.encrypt(AES256.decrypt(v2, temp_pass), pass));
                pst2.setString(3, AES256.encrypt(AES256.decrypt(v3, temp_pass), pass));
                pst2.setInt(4, id);
                pst2.execute();
                pst2.close();

            }

            rs1.close();
            pst1.close();
            con1.close();
            con2.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    public void updateTemp() {
        value_email = MD5Hash.getMd5(input_email.getText());
        url = "jdbc:sqlite:Databases/users.db";

        PreparedStatement pst1, pst2 = null;
        Connection con1, con2 = null;
        ResultSet rs = null;
        try {
            con1 = DriverManager.getConnection(url);
            String query = "UPDATE users SET temp = ? WHERE emailid = ?;";
            pst1 = con1.prepareStatement(query);
            pst1.setString(1, AES256.encrypt(new String(input_password.getPassword()), "1!2@3#4$5%6^7&8*"));
            pst1.setString(2, value_email);
            pst1.execute();
            pst1.close();
            con1.close();

            input_password.setEnabled(false);
            input_confirm_password.setEnabled(false);
            msg2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 94, 4)));
            msg2.setForeground(new Color(26, 165, 0));
            msg2.setText("Password Successfully Changed!");
            msg2.setVisible(true);
            loading2.setVisible(false);
            reset_button.setEnabled(true);

            new java.util.Timer().schedule(
                    new java.util.TimerTask() {
                        @Override
                        public void run() {
                            System.gc();
                            login = new Login();
                            PassCryptPasswordManager.obj.MainPanel.removeAll();
                            PassCryptPasswordManager.obj.MainPanel.add(login);
                            PassCryptPasswordManager.obj.MainPanel.revalidate();
                            PassCryptPasswordManager.obj.MainPanel.repaint();
                        }
                    },
                    1000);

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void startLoading() {

    }

    private void stoptLoading() {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel confrim_password_error;
    private javax.swing.JLabel email_error;
    private javax.swing.JPasswordField input_confirm_password;
    private javax.swing.JTextField input_email;
    private javax.swing.JTextField input_otp;
    private javax.swing.JPasswordField input_password;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel loading1;
    private javax.swing.JLabel loading2;
    private javax.swing.JLabel login_label;
    private javax.swing.JLabel msg1;
    private javax.swing.JLabel msg2;
    private javax.swing.JButton otp_button;
    private javax.swing.JLabel otp_error;
    private javax.swing.JPanel p1;
    private javax.swing.JPanel p2;
    private javax.swing.JLabel password_error;
    private javax.swing.JButton reset_button;
    private javax.swing.JCheckBox showPass;
    // End of variables declaration//GEN-END:variables

}
